{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91970\\\\Desktop\\\\project\\\\frontend\\\\src\\\\contexts\\\\PhotoContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { foldersAPI, photosAPI } from '../services/api';\nimport { handleError } from '../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PhotoContext = /*#__PURE__*/createContext();\nexport const usePhotos = () => {\n  _s();\n  const context = useContext(PhotoContext);\n  if (!context) {\n    throw new Error('usePhotos must be used within a PhotoProvider');\n  }\n  return context;\n};\n_s(usePhotos, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const PhotoProvider = ({\n  children\n}) => {\n  _s2();\n  const [folders, setFolders] = useState([]);\n  const [currentFolder, setCurrentFolder] = useState(null);\n  const [allPhotos, setAllPhotos] = useState([]);\n  const [favoritePhotos, setFavoritePhotos] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchFolders = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await foldersAPI.getFolders();\n      setFolders(response.data);\n\n      // Fetch all photos from all folders\n      const allPhotosData = [];\n      for (const folder of response.data) {\n        try {\n          const photosResponse = await foldersAPI.getFolderPhotos(folder.id);\n          const folderPhotos = photosResponse.data.map(photo => ({\n            ...photo,\n            folderName: folder.name,\n            folderId: folder.id\n          }));\n          allPhotosData.push(...folderPhotos);\n        } catch (err) {\n          console.error(`Error fetching photos for folder ${folder.id}:`, err);\n        }\n      }\n      setAllPhotos(allPhotosData);\n      setFavoritePhotos(allPhotosData.filter(photo => photo.is_favorite));\n    } catch (err) {\n      setError(handleError(err));\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n  const createFolder = async folderData => {\n    try {\n      const response = await foldersAPI.createFolder(folderData);\n      setFolders(prev => [...prev, response.data]);\n      return {\n        success: true,\n        data: response.data\n      };\n    } catch (err) {\n      const error = handleError(err);\n      setError(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n  const deleteFolder = async folderId => {\n    try {\n      await foldersAPI.deleteFolder(folderId);\n      setFolders(prev => prev.filter(folder => folder.id !== folderId));\n      setAllPhotos(prev => prev.filter(photo => photo.folderId !== folderId));\n      return {\n        success: true\n      };\n    } catch (err) {\n      const error = handleError(err);\n      setError(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n  const uploadPhoto = async (folderId, file, filename) => {\n    try {\n      const formData = new FormData();\n      formData.append('image', file);\n      formData.append('filename', filename || file.name);\n      const response = await photosAPI.uploadPhoto(folderId, formData);\n      const folder = folders.find(f => f.id === folderId);\n      const newPhoto = {\n        ...response.data,\n        folderName: folder === null || folder === void 0 ? void 0 : folder.name,\n        folderId: folderId\n      };\n      setAllPhotos(prev => [...prev, newPhoto]);\n      return {\n        success: true,\n        data: newPhoto\n      };\n    } catch (err) {\n      const error = handleError(err);\n      setError(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n  const deletePhoto = async (folderId, photoId) => {\n    try {\n      await photosAPI.deletePhoto(folderId, photoId);\n      setAllPhotos(prev => prev.filter(photo => photo.id !== photoId));\n      setFavoritePhotos(prev => prev.filter(photo => photo.id !== photoId));\n      return {\n        success: true\n      };\n    } catch (err) {\n      const error = handleError(err);\n      setError(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n  const toggleFavorite = async (photoId, isFavorite) => {\n    try {\n      // Note: You might need to implement this endpoint in your Django backend\n      // await photosAPI.toggleFavorite(photoId, isFavorite);\n\n      setAllPhotos(prev => prev.map(photo => photo.id === photoId ? {\n        ...photo,\n        is_favorite: isFavorite\n      } : photo));\n      if (isFavorite) {\n        const photo = allPhotos.find(p => p.id === photoId);\n        if (photo) {\n          setFavoritePhotos(prev => [...prev, {\n            ...photo,\n            is_favorite: true\n          }]);\n        }\n      } else {\n        setFavoritePhotos(prev => prev.filter(photo => photo.id !== photoId));\n      }\n      return {\n        success: true\n      };\n    } catch (err) {\n      const error = handleError(err);\n      setError(error);\n      return {\n        success: false,\n        error\n      };\n    }\n  };\n  const getPhotosByFolder = folderId => {\n    return allPhotos.filter(photo => photo.folderId === folderId);\n  };\n  const getRecentPhotos = (limit = 10) => {\n    return allPhotos.sort((a, b) => new Date(b.created_at) - new Date(a.created_at)).slice(0, limit);\n  };\n  const searchPhotos = query => {\n    if (!query.trim()) return [];\n    return allPhotos.filter(photo => {\n      var _photo$description;\n      return photo.title.toLowerCase().includes(query.toLowerCase()) || ((_photo$description = photo.description) === null || _photo$description === void 0 ? void 0 : _photo$description.toLowerCase().includes(query.toLowerCase())) || photo.folderName.toLowerCase().includes(query.toLowerCase());\n    });\n  };\n  const value = {\n    folders,\n    currentFolder,\n    allPhotos,\n    favoritePhotos,\n    loading,\n    error,\n    setCurrentFolder,\n    setError,\n    fetchFolders,\n    createFolder,\n    deleteFolder,\n    uploadPhoto,\n    deletePhoto,\n    toggleFavorite,\n    getPhotosByFolder,\n    getRecentPhotos,\n    searchPhotos\n  };\n  return /*#__PURE__*/_jsxDEV(PhotoContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s2(PhotoProvider, \"PoiP2CtElS7xu8RKyJPvaFiSiac=\");\n_c = PhotoProvider;\nvar _c;\n$RefreshReg$(_c, \"PhotoProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","foldersAPI","photosAPI","handleError","jsxDEV","_jsxDEV","PhotoContext","usePhotos","_s","context","Error","PhotoProvider","children","_s2","folders","setFolders","currentFolder","setCurrentFolder","allPhotos","setAllPhotos","favoritePhotos","setFavoritePhotos","loading","setLoading","error","setError","fetchFolders","response","getFolders","data","allPhotosData","folder","photosResponse","getFolderPhotos","id","folderPhotos","map","photo","folderName","name","folderId","push","err","console","filter","is_favorite","createFolder","folderData","prev","success","deleteFolder","uploadPhoto","file","filename","formData","FormData","append","find","f","newPhoto","deletePhoto","photoId","toggleFavorite","isFavorite","p","getPhotosByFolder","getRecentPhotos","limit","sort","a","b","Date","created_at","slice","searchPhotos","query","trim","_photo$description","title","toLowerCase","includes","description","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91970/Desktop/project/frontend/src/contexts/PhotoContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport { foldersAPI, photosAPI } from '../services/api';\r\nimport { handleError } from '../utils/helpers';\r\n\r\nconst PhotoContext = createContext();\r\n\r\nexport const usePhotos = () => {\r\n  const context = useContext(PhotoContext);\r\n  if (!context) {\r\n    throw new Error('usePhotos must be used within a PhotoProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const PhotoProvider = ({ children }) => {\r\n  const [folders, setFolders] = useState([]);\r\n  const [currentFolder, setCurrentFolder] = useState(null);\r\n  const [allPhotos, setAllPhotos] = useState([]);\r\n  const [favoritePhotos, setFavoritePhotos] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchFolders = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await foldersAPI.getFolders();\r\n      setFolders(response.data);\r\n      \r\n      // Fetch all photos from all folders\r\n      const allPhotosData = [];\r\n      for (const folder of response.data) {\r\n        try {\r\n          const photosResponse = await foldersAPI.getFolderPhotos(folder.id);\r\n          const folderPhotos = photosResponse.data.map(photo => ({\r\n            ...photo,\r\n            folderName: folder.name,\r\n            folderId: folder.id,\r\n          }));\r\n          allPhotosData.push(...folderPhotos);\r\n        } catch (err) {\r\n          console.error(`Error fetching photos for folder ${folder.id}:`, err);\r\n        }\r\n      }\r\n      \r\n      setAllPhotos(allPhotosData);\r\n      setFavoritePhotos(allPhotosData.filter(photo => photo.is_favorite));\r\n    } catch (err) {\r\n      setError(handleError(err));\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const createFolder = async (folderData) => {\r\n    try {\r\n      const response = await foldersAPI.createFolder(folderData);\r\n      setFolders(prev => [...prev, response.data]);\r\n      return { success: true, data: response.data };\r\n    } catch (err) {\r\n      const error = handleError(err);\r\n      setError(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  const deleteFolder = async (folderId) => {\r\n    try {\r\n      await foldersAPI.deleteFolder(folderId);\r\n      setFolders(prev => prev.filter(folder => folder.id !== folderId));\r\n      setAllPhotos(prev => prev.filter(photo => photo.folderId !== folderId));\r\n      return { success: true };\r\n    } catch (err) {\r\n      const error = handleError(err);\r\n      setError(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  const uploadPhoto = async (folderId, file, filename) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('image', file);\r\n      formData.append('filename', filename || file.name);\r\n      \r\n      const response = await photosAPI.uploadPhoto(folderId, formData);\r\n      const folder = folders.find(f => f.id === folderId);\r\n      const newPhoto = {\r\n        ...response.data,\r\n        folderName: folder?.name,\r\n        folderId: folderId,\r\n      };\r\n      \r\n      setAllPhotos(prev => [...prev, newPhoto]);\r\n      return { success: true, data: newPhoto };\r\n    } catch (err) {\r\n      const error = handleError(err);\r\n      setError(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  const deletePhoto = async (folderId, photoId) => {\r\n    try {\r\n      await photosAPI.deletePhoto(folderId, photoId);\r\n      setAllPhotos(prev => prev.filter(photo => photo.id !== photoId));\r\n      setFavoritePhotos(prev => prev.filter(photo => photo.id !== photoId));\r\n      return { success: true };\r\n    } catch (err) {\r\n      const error = handleError(err);\r\n      setError(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  const toggleFavorite = async (photoId, isFavorite) => {\r\n    try {\r\n      // Note: You might need to implement this endpoint in your Django backend\r\n      // await photosAPI.toggleFavorite(photoId, isFavorite);\r\n      \r\n      setAllPhotos(prev => prev.map(photo => \r\n        photo.id === photoId ? { ...photo, is_favorite: isFavorite } : photo\r\n      ));\r\n      \r\n      if (isFavorite) {\r\n        const photo = allPhotos.find(p => p.id === photoId);\r\n        if (photo) {\r\n          setFavoritePhotos(prev => [...prev, { ...photo, is_favorite: true }]);\r\n        }\r\n      } else {\r\n        setFavoritePhotos(prev => prev.filter(photo => photo.id !== photoId));\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (err) {\r\n      const error = handleError(err);\r\n      setError(error);\r\n      return { success: false, error };\r\n    }\r\n  };\r\n\r\n  const getPhotosByFolder = (folderId) => {\r\n    return allPhotos.filter(photo => photo.folderId === folderId);\r\n  };\r\n\r\n  const getRecentPhotos = (limit = 10) => {\r\n    return allPhotos\r\n      .sort((a, b) => new Date(b.created_at) - new Date(a.created_at))\r\n      .slice(0, limit);\r\n  };\r\n\r\n  const searchPhotos = (query) => {\r\n    if (!query.trim()) return [];\r\n    return allPhotos.filter(photo =>\r\n      photo.title.toLowerCase().includes(query.toLowerCase()) ||\r\n      photo.description?.toLowerCase().includes(query.toLowerCase()) ||\r\n      photo.folderName.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n  };\r\n\r\n  const value = {\r\n    folders,\r\n    currentFolder,\r\n    allPhotos,\r\n    favoritePhotos,\r\n    loading,\r\n    error,\r\n    setCurrentFolder,\r\n    setError,\r\n    fetchFolders,\r\n    createFolder,\r\n    deleteFolder,\r\n    uploadPhoto,\r\n    deletePhoto,\r\n    toggleFavorite,\r\n    getPhotosByFolder,\r\n    getRecentPhotos,\r\n    searchPhotos,\r\n  };\r\n\r\n  return (\r\n    <PhotoContext.Provider value={value}>\r\n      {children}\r\n    </PhotoContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
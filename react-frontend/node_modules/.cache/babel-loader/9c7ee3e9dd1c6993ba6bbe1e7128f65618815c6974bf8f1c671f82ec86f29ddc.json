{"ast":null,"code":"export const validateLoginForm = data => {\n  const errors = {};\n  if (!data.username) {\n    errors.username = 'Username is required';\n  } else if (data.username.length < 3) {\n    errors.username = 'Username must be at least 3 characters';\n  }\n  if (!data.password) {\n    errors.password = 'Password is required';\n  } else if (data.password.length < 8) {\n    errors.password = 'Password must be at least 8 characters';\n  }\n  return {\n    errors,\n    isValid: Object.keys(errors).length === 0\n  };\n};\nexport const validateRegisterForm = data => {\n  const errors = {};\n  if (!data.username) {\n    errors.username = 'Username is required';\n  } else if (data.username.length < 3) {\n    errors.username = 'Username must be at least 3 characters';\n  } else if (!/^[a-zA-Z0-9_]+$/.test(data.username)) {\n    errors.username = 'Username can only contain letters, numbers, and underscores';\n  }\n  if (!data.email) {\n    errors.email = 'Email is required';\n  } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(data.email)) {\n    errors.email = 'Please enter a valid email address';\n  }\n  if (!data.password) {\n    errors.password = 'Password is required';\n  } else if (data.password.length < 8) {\n    errors.password = 'Password must be at least 8 characters';\n  } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(data.password)) {\n    errors.password = 'Password must contain at least one uppercase letter, one lowercase letter, and one number';\n  }\n  if (!data.password_confirm) {\n    errors.password_confirm = 'Please confirm your password';\n  } else if (data.password !== data.password_confirm) {\n    errors.password_confirm = 'Passwords do not match';\n  }\n  return {\n    errors,\n    isValid: Object.keys(errors).length === 0\n  };\n};\nexport const validateFolderForm = data => {\n  const errors = {};\n  if (!data.name) {\n    errors.name = 'Folder name is required';\n  } else if (data.name.length < 1) {\n    errors.name = 'Folder name cannot be empty';\n  } else if (data.name.length > 100) {\n    errors.name = 'Folder name cannot exceed 100 characters';\n  } else if (!/^[a-zA-Z0-9\\s_-]+$/.test(data.name)) {\n    errors.name = 'Folder name can only contain letters, numbers, spaces, hyphens, and underscores';\n  }\n  return {\n    errors,\n    isValid: Object.keys(errors).length === 0\n  };\n};\nexport const validatePhotoUpload = files => {\n  const errors = [];\n  const maxSize = 10 * 1024 * 1024; // 10MB\n  const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\n  files.forEach((file, index) => {\n    if (!allowedTypes.includes(file.type)) {\n      errors.push(`File ${index + 1}: Only JPEG, PNG, GIF, and WebP images are allowed`);\n    }\n    if (file.size > maxSize) {\n      errors.push(`File ${index + 1}: File size must be less than 10MB`);\n    }\n    if (!file.name || file.name.trim() === '') {\n      errors.push(`File ${index + 1}: File must have a name`);\n    }\n  });\n  return {\n    errors,\n    isValid: errors.length === 0\n  };\n};","map":{"version":3,"names":["validateLoginForm","data","errors","username","length","password","isValid","Object","keys","validateRegisterForm","test","email","password_confirm","validateFolderForm","name","validatePhotoUpload","files","maxSize","allowedTypes","forEach","file","index","includes","type","push","size","trim"],"sources":["C:/Users/91970/Desktop/project/frontend/src/utils/validation.js"],"sourcesContent":["export const validateLoginForm = (data) => {\r\n  const errors = {};\r\n\r\n  if (!data.username) {\r\n    errors.username = 'Username is required';\r\n  } else if (data.username.length < 3) {\r\n    errors.username = 'Username must be at least 3 characters';\r\n  }\r\n\r\n  if (!data.password) {\r\n    errors.password = 'Password is required';\r\n  } else if (data.password.length < 8) {\r\n    errors.password = 'Password must be at least 8 characters';\r\n  }\r\n\r\n  return {\r\n    errors,\r\n    isValid: Object.keys(errors).length === 0,\r\n  };\r\n};\r\n\r\nexport const validateRegisterForm = (data) => {\r\n  const errors = {};\r\n\r\n  if (!data.username) {\r\n    errors.username = 'Username is required';\r\n  } else if (data.username.length < 3) {\r\n    errors.username = 'Username must be at least 3 characters';\r\n  } else if (!/^[a-zA-Z0-9_]+$/.test(data.username)) {\r\n    errors.username = 'Username can only contain letters, numbers, and underscores';\r\n  }\r\n\r\n  if (!data.email) {\r\n    errors.email = 'Email is required';\r\n  } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(data.email)) {\r\n    errors.email = 'Please enter a valid email address';\r\n  }\r\n\r\n  if (!data.password) {\r\n    errors.password = 'Password is required';\r\n  } else if (data.password.length < 8) {\r\n    errors.password = 'Password must be at least 8 characters';\r\n  } else if (!/(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/.test(data.password)) {\r\n    errors.password = 'Password must contain at least one uppercase letter, one lowercase letter, and one number';\r\n  }\r\n\r\n  if (!data.password_confirm) {\r\n    errors.password_confirm = 'Please confirm your password';\r\n  } else if (data.password !== data.password_confirm) {\r\n    errors.password_confirm = 'Passwords do not match';\r\n  }\r\n\r\n  return {\r\n    errors,\r\n    isValid: Object.keys(errors).length === 0,\r\n  };\r\n};\r\n\r\nexport const validateFolderForm = (data) => {\r\n  const errors = {};\r\n\r\n  if (!data.name) {\r\n    errors.name = 'Folder name is required';\r\n  } else if (data.name.length < 1) {\r\n    errors.name = 'Folder name cannot be empty';\r\n  } else if (data.name.length > 100) {\r\n    errors.name = 'Folder name cannot exceed 100 characters';\r\n  } else if (!/^[a-zA-Z0-9\\s_-]+$/.test(data.name)) {\r\n    errors.name = 'Folder name can only contain letters, numbers, spaces, hyphens, and underscores';\r\n  }\r\n\r\n  return {\r\n    errors,\r\n    isValid: Object.keys(errors).length === 0,\r\n  };\r\n};\r\n\r\nexport const validatePhotoUpload = (files) => {\r\n  const errors = [];\r\n  const maxSize = 10 * 1024 * 1024; // 10MB\r\n  const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\r\n\r\n  files.forEach((file, index) => {\r\n    if (!allowedTypes.includes(file.type)) {\r\n      errors.push(`File ${index + 1}: Only JPEG, PNG, GIF, and WebP images are allowed`);\r\n    }\r\n\r\n    if (file.size > maxSize) {\r\n      errors.push(`File ${index + 1}: File size must be less than 10MB`);\r\n    }\r\n\r\n    if (!file.name || file.name.trim() === '') {\r\n      errors.push(`File ${index + 1}: File must have a name`);\r\n    }\r\n  });\r\n\r\n  return {\r\n    errors,\r\n    isValid: errors.length === 0,\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}